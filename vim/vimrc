" .vimrc used by Guy Moore.

set number              " Displays line numbers
set showmode            " Show current mode at the bottom
set visualbell          " No sounds

" Turn on syntax highlighting
syntax on

"TAB THINGS
" size of a hard tab"
set tabstop=4

set softtabstop=0

set shiftwidth=4

" Nice to show where 80 is so common length can be used.
set colorcolumn=80

" make tab insert indents instead
" beginning of a line
" set smarttab

" (no) always uses spaces instead of tab characters
" expandtab


" Pathogen
" ====================================================
" Add Pathogen
execute pathogen#infect()
filetype plugin indent on

" Pathogen settings
" set laststatus=2
" set ttimeoutlen=50

" Colors
" ====================================================
" Force 256 colors because solarized uses 256 colors.
set t_Co=256

" Solarized
" ====================================================

" solarized color
set background=dark

"solarized options are optional but somtimes ruin things.
"let g:solarized_contrast = "high"
"let g:solarized_termcolors = 256
"let g:solarized_visibility = "high"
"
"Colors for vim windows inside tmux need transparency settings, but windows
"inside just iterm2 don't.
" let g:solarized_termtrans = 1

"Set solarized.
colorscheme solarized

" Base 16 Colors
" ====================================================
"let base16colorspace=256

"colorscheme base16-eighties

" Access colors present in 256 colorspace

"set background=dark

" Airline
" ====================================================
" This enables airline.
let g:airline#extensions#tabline#enabled = 1

" Enable on single buffer.
set laststatus=2


" LilyPond
" ====================================================
set runtimepath+=/usr/local/share/lilypond/${LILYPOND_VERSION}/vim/


"==========================================
function MoveToPrevTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() != 1
    close!
    if l:tab_nr == tabpagenr('$')
      tabprev
    endif
    sp
  else
    close!
    exe "0tabnew"
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc

function MoveToNextTab()
  "there is only one window
  if tabpagenr('$') == 1 && winnr('$') == 1
    return
  endif
  "preparing new window
  let l:tab_nr = tabpagenr('$')
  let l:cur_buf = bufnr('%')
  if tabpagenr() < tab_nr
    close!
    if l:tab_nr == tabpagenr('$')
      tabnext
    endif
    sp
  else
    close!
    tabnew
  endif
  "opening current buffer in new window
  exe "b".l:cur_buf
endfunc

nnoremap <C-t>h :call MoveToNextTab()<CR>
nnoremap <C-t>l :call MoveToPrevTab()<CR>
"=========================================
